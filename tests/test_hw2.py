import pytest
from src.h_w2 import *

@pytest.mark.parametrize("value, expend_result",
                         [([1, 2, 3, 4, 5], 3.0),
                          ([1], 1.0),
                          ([i for i in range(10000)], 4999.5),
                          ([i for i in range(-10000, 0)], -5000.5),
                          ([1, 2, 3, 4, 5], 3.0),
                          ([-1, -2, -3,- 4, -5], -3.0),
                          ([-1.0, -2.0, -3.0, -4.0, -5.0], -3.0),
                          ([2, 3.1, 4.9, 5, 1], 3.2),
                          ([-2, -3.1, -4.9, -5, -1], -3.2),
                          ([-2, -3.1, 4.9, 5, 6], 2.16),
                          ])
def test_average_positive(value, expend_result):

    assert average(value) == expend_result


@pytest.mark.parametrize("value, expend_result",
                         [([], pytest.raises(ValueError)),
                          (['a'], pytest.raises(TypeError)),
                          (['*'], pytest.raises(TypeError))


                          ])

def test_average_negative(value, expend_result):
    with expend_result:

        assert average(value) == expend_result



@pytest.mark.parametrize("value, expend_result",
                         [(1, 1),
                          (0, 1),
                          (3, 6),
                          (10, 3628800),
                          (55, 12696403353658275925965100847566516959580321051449436762275840000000000000),
                          (1558, 2424858401169875856987549316530261243529336396354700842715749979460646110058233651782392648030625575890603295838549136086203631494904372698578181999057212055535785846413969420066573092861481554378165635499319577948946469878800693106187103360224139995239288292467274991657581799887960732860730465294056429604010675825650845592134295845654185424392132561718318353026455262912039002664120813132000602020151818744862796534620281615341820385425346251471878908201301227337883132211649086124629581129201309548248991126780745470297556208250525153383428851713805456555419758707284753260768805845944423382917543868035509410367649517977378961396490420583560768554085728596839435423979501005167390976056828737759722931049053051870481354220566751757226315251920734049093559363656820097662644345104685665152444697669009659982518091310671058073959926600845011866653850725006741331610135998770449096045426206531544154144601729043078225608136613193686346346764203375001081246967670378990121777385901921245133042374777487279240176076181929206652760242551593468206588418766183401939736514661022447416367789422605988204789848476655904174023752533626768590363300938231129606313365312387913130971900390208938471907315110717317435321123464794906710193916413838207147074458529525935478113361841325520841044346267628381902449941524896332350384902526765982148700924154884023605222691782597459599121027544229955922681404443327840648118042191399221650956164672857148227101451532445295161873221075926687151309815858723796054292521542311108190618276056103071140889723197707702368244847779594197140241112042128900654662720100758519336991189420021569389659862373674109453168227154296233208845394442627758282640964050502230911632608683569869755423400072413157317525410032842653580093887735517690412593258359388487289802270353135756659547954667344672901471048389223259683469006995762263469036620522300662493285722212048473141061111827211648276284983691538501299996459350066613212712170474963890532178735800245974574640904674554123815017979113627519922145830691096868313633320304359164703825903963661604335411773033078697699311892617463175229334854531701631075383899708905233041291527887059381689504636267968336033244928031019352467588242769652345533099117594059102256248189810284600657855707971881794779733938869280438373216606816889288287015049782284899585369920877745590840887712363661997881545433844629800189205229597440143179700162824702134957418586285920953284900382720017357876988767296282790084172114532622647998154080918863914038958583660595208167281479883677535909771428614756103440615905873310606657147769597200148222567970379939256596381142850272187439045199365546037482887333248526026065549397730475314476322168067523034600032867511743419691437003992038152628324659432676263448764134014429405489180634364519282138519962363193701386950109467042340571843977537752976341094127822030600936793871334872293490903117072170466054983434825167266916722980296391441044563178977701723309785609111259614474247364528550386532388327264689711775604664427340228901835597557029992960492192464058200400988909295153551200837397817601282679220611104173652358509007521101053095620748168997861050130023817703319787079095235833374426177514286578246903083415169109359323812741314724620593271262917265094024216337214863533448529254632599541703878619604512594846124252613960262726215219134672211844311020666195270036284140614857902974771290503656870984782590335117218368984797972576852801418834170795097602013208317371156612874344638041764532057542786831351076365498540443813006372421380736034740771076764178132559828434447544678633583005046265334346831012385703067191550416222980088761154519553974935287498676582754658553261232252765802371799256016444945115393409561160793126126735836975302341046431089640850574341354122545220831810806852068691732327187184240511538962440151159519314143893886850233861037997459199145386272154940965985357257552760909210073432064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
                          (2, 2)
                          ])
def test_factorial_positive(value, expend_result):

    assert factorial(value) == expend_result


@pytest.mark.parametrize("value, expend_result",
                         [('', pytest.raises(TypeError)),
                          ('a', pytest.raises(TypeError)),
                          ('*', pytest.raises(TypeError)),
                          (1.0, pytest.raises(TypeError)),
                          ])

def test_factorial_negative(value, expend_result):
    with expend_result:

        assert factorial(value) == expend_result



